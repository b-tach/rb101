#+TITLE: 6 Practice Problems Hard 1
#+property: header-args:ruby :session ruby :results output pp :wrap example :exports both
#+options: num:nil toc:nil
#+setupfile: http://10.1.1.1:3000/grumpybear/org-themes/raw/branch/master/src/solarized_dark/solarized_dark.theme

* Question 1:
What do you expect to happen when the ~greeting~ variable is referenced in the last line of the code below?
#+begin_src ruby
if false
  greeting = "hello world"
end

greeting
#+end_src
** Answer 1:
I expect an error to occur stating something along the lines of an invalid reference. The rationale is that ~greeting~ is only initialized in the ~if~ statement when the condition evaluates to ~true~. However, ~false~ obviously evaluates to ~false~.
What happens:
NameError (_undefined local variable or method `greeting' for main:Object_)

* Question 2:
What is the result of the last line in the code below?
#+begin_src ruby
greetings = { a: 'hi' }
informal_greeting = greetings[:a]
informal_greeting << ' there'

puts informal_greeting  #  => "hi there"
puts greetings
#+end_src
** Answer 2:
I expect the final line to display ~"hi there".~ Rationale: ~informal_greeting~ initializes to the same object that ~greetings[:a]~ points to. Then it uses the ~<<~ operator which mutates the same object calling it (referred to by both ~greetings[:a]~ and ~informal_greeting~ both).

* Question 3:
In other practice problems, we have looked at how the scope of variables affects the modification of one "layer" when they are passed to another.
To drive home the salient aspects of variable scope and modification of one scope by another, consider the following similar sets of code.
What will be printed by each of these code groups?
** A:
#+begin_src ruby
def mess_with_vars(one, two, three)
  one = two
  two = three
  three = one
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}"
puts "two is: #{two}"
puts "three is: #{three}"
#+end_src
** Answer A:
#+begin_src
one is: one
two is: two
three is: three
#+end_src

** B:
#+begin_src ruby
def mess_with_vars(one, two, three)
  one = "two"
  two = "three"
  three = "one"
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}"
puts "two is: #{two}"
puts "three is: #{three}"
#+end_src
** Answer B:
#+begin_src
one is: one
two is: two
three is: three
#+end_src

** C:
#+begin_src ruby
def mess_with_vars(one, two, three)
  one.gsub!("one","two")
  two.gsub!("two","three")
  three.gsub!("three","one")
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}"
puts "two is: #{two}"
puts "three is: #{three}"
#+end_src
** Answer C:
#+begin_src
one is: two
two is: three
three is: one
#+end_src
The first two give the same output due to reassignment within the method. This ensures that the outer scoped variable of the same continues to refer to the same object unmutated. Code block C, however, uses ~String#gsub!~ which mutates its caller. Since the outer scoped variables are passed to the method as arguments, the objects that they refer to get mutated by this. Therefore their values are changed in the end.

* Question 4:
Ben was tasked to write a simple ruby method to determine if an input string is an IP address representing dot-separated numbers. e.g. "10.4.5.11". He is not familiar with regular expressions. Alyssa supplied Ben with a method called ~is_an_ip_number~? that determines if a string is a numeric string between ~0~ and ~255~ as required for IP numbers and asked Ben to use it.
#+begin_src ruby
def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    break unless is_an_ip_number?(word)
  end
  return true
end
#+end_src
Alyssa reviewed Ben's code and says "It's a good start, but you missed a few things. You're not returning a false condition, and you're not handling the case that there are more or fewer than 4 components to the IP address (e.g. "4.5.5" or "1.2.3.4.5" should be invalid)."
Help Ben fix his code.

** Answer 4:
Copied and modified:
#+begin_src ruby
def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  return false if dot_separated_words.size != 4
  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    return false if !is_an_ip_number?(word)
  end
  return true
end
#+end_src
