#+title: Lesson 5 Practice Problems
#+property: header-args:ruby :session ruby :results output pp :wrap example :exports both
#+options: num:nil toc:nil
#+setupfile: http://10.1.1.1:3000/grumpybear/org-themes/raw/branch/master/src/solarized_dark/solarized_dark.theme

* Problem 1
How would you order this array of number strings by descending numeric value?
#+begin_src ruby :results none
arr = ['10', '11', '9', '7', '8']
#+end_src
** Answer:
They can be easily ordered by numerical value by converting the strings to integers.
#+begin_src ruby :results output pp
p arr.sort_by {|n| n.to_i }.reverse
p arr.map {|n| n.to_i }.sort.map {|n| n.to_s}.reverse
#+end_src

#+RESULTS:
#+begin_example
["11", "10", "9", "8", "7"]
["11", "10", "9", "8", "7"]
#+end_example

** Official answer:
#+begin_src ruby :results value scalar
arr.sort { |a, b| b.to_i <=> a.to_i }
#+end_src

#+RESULTS:
#+begin_example
["11", "10", "9", "8", "7"]
#+end_example

* Problem 2
How would you order this array of hashes based on the year of publication of each book, from the earliest to the latest?
#+begin_src ruby :results none
books = [
  {title: 'One Hundred Years of Solitude', author: 'Gabriel Garcia Marquez', published: '1967'},
  {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', published: '1925'},
  {title: 'War and Peace', author: 'Leo Tolstoy', published: '1869'},
  {title: 'Ulysses', author: 'James Joyce', published: '1922'}
]
#+end_src

** Answer:
Convert the year strings to integers. No custom sorting needs to be done since teh default ~sort~ goes from least to greatest.
#+begin_src ruby :results value pp
books.sort_by do |book|
  book[:published].to_i
end
#+end_src

#+RESULTS:
#+begin_example
[{:title=>"War and Peace", :author=>"Leo Tolstoy", :published=>"1869"},
 {:title=>"Ulysses", :author=>"James Joyce", :published=>"1922"},
 {:title=>"The Great Gatsby", :author=>"F. Scott Fitzgerald", :published=>"1925"},
 {:title=>"One Hundred Years of Solitude", :author=>"Gabriel Garcia Marquez", :published=>"1967"}]
#+end_example

* Problem 3
For each of these collection objects demonstrate how you would reference the letter ~'g'~.
#+begin_src ruby :results none
arr1 = ['a', 'b', ['c', ['d', 'e', 'f', 'g']]]
arr2 = [{first: ['a', 'b', 'c'], second: ['d', 'e', 'f']}, {third: ['g', 'h', 'i']}]
arr3 = [['abc'], ['def'], {third: ['ghi']}]
hsh1 = {'a' => ['d', 'e'], 'b' => ['f', 'g'], 'c' => ['h', 'i']}
hsh2 = {first: {'d' => 3}, second: {'e' => 2, 'f' => 1}, third: {'g' => 0}}
#+end_src

** Answer
#+begin_src ruby :results output pp
p arr1[2][1][3]
p arr2[1][:third][0]
p arr3[2][:third][0][0]
p hsh1['b'][1]
p hsh2[:third].key(0)
#+end_src

#+RESULTS:
#+begin_example
"g"
"g"
"g"
"g"
"g"
#+end_example

* Problem 4
For each of these collection objects where the value ~3~ occurs, demonstrate how you would change this to ~4~.
#+begin_src ruby :results none
arr1 = [1, [2, 3], 4]
arr2 = [{a: 1}, {b: 2, c: [7, 6, 5], d: 4}, 3]
hsh1 = {first: [1, 2, [3]]}
hsh2 = {['a'] => {a: ['1', :two, 3], b: 4}, 'b' => 5}
#+end_src

** Answer
#+begin_src ruby :results output pp
arr1[1][1] = 4
arr2[2] = 4
hsh1[:first][2][0] = 4
hsh2[['a']][:a][2] = 4

p arr1
p arr2
p hsh1
p hsh2
#+end_src

#+RESULTS:
#+begin_example
[1, [2, 4], 4]
[{:a=>1}, {:b=>2, :c=>[7, 6, 5], :d=>4}, 4]
{:first=>[1, 2, [4]]}
{["a"]=>{:a=>["1", :two, 4], :b=>4}, "b"=>5}
#+end_example

* Problem 5
Given this nested Hash:
#+begin_src ruby :results none
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}
#+end_src
figure out the total age of just the male members of the family.

** Answer
The slightly verbose but readable way without method-hunting
#+begin_src ruby
total_age = 0
munsters.each do |name, stats|
  if stats["gender"] == "male"
    total_age += stats["age"]
  end
end
p total_age
#+end_src

#+RESULTS:
#+begin_example
444
#+end_example

* Problem 6
One of the most frequently used real-world string properties is that of "string substitution", where we take a hard-coded string and modify it with various parameters from our program.
Given this previously seen family hash, print out the name, age and gender of each family member:
#+begin_src ruby :results none
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}
#+end_src
...like this:
#+begin_src text :results none
(Name) is a (age)-year-old (male or female).
#+end_src

** Answer
#+begin_src ruby
munsters.each do |name, stats|
  puts "#{name} is a #{stats["age"]}-year-old #{stats["gender"]}"
end
#+end_src

#+RESULTS:
#+begin_example
Herman is a 32-year-old male
Lily is a 30-year-old female
Grandpa is a 402-year-old male
Eddie is a 10-year-old male
Marilyn is a 23-year-old female
#+end_example

* Problem 7
Given this code, what would be the final values of ~a~ and ~b~? Try to work this out without running the code.
#+begin_src ruby :results none
a = 2
b = [5, 8]
arr = [a, b]

arr[0] += 2
arr[1][0] -= a
#+end_src

** Answer
if the operators ~+=~ and ~-=~ do not mutate their caller (which is what I am assuming), then...
~a~ will be unchanged. When element ~0~ of ~arr~ is referenced, it is reassigned to the value of ~a + 2~, rather than assigning ~a~ to ~a + 2~ and assigning itself that resulting value of ~a~. In essence, the pointer at ~arr[0]~ is changed.
However, ~b~ will not fare the same. ~arr[1]~ directly references the object in its second index, but the object in its second index is an array. So ~arr[1][0]~ directly references ~b[0]~, rather than ~arr[1]~. Therefore when it is decremented by the value of a, ~b~ is mutated. ~b~'s final value will be ~[3, 8]~.

#+begin_src ruby
p a
p b
#+end_src

#+RESULTS:
#+begin_example
2
[3, 8]
#+end_example

* Problem 8
Using the ~each~ method, write some code to output all of the vowels from the strings.
#+begin_src ruby :results none
hsh = {first: ['the', 'quick'], second: ['brown', 'fox'], third: ['jumped'], fourth: ['over', 'the', 'lazy', 'dog']}
#+end_src

** Answer
#+begin_src ruby
vowels = ""
hsh.each do |key, word_arr|
  word_arr.each do |word|
    vowels += word.gsub(/[^aeiouy]/, '')
  end
end
p vowels
#+end_src

#+RESULTS:
#+begin_example
"euiooueoeeayo"
#+end_example


* Problem 9
Given this data structure, return a new array of the same structure but with the sub arrays being ordered (alphabetically or numerically as appropriate) in descending order.
#+begin_src ruby :results none
arr = [['b', 'c', 'a'], [2, 1, 3], ['blue', 'black', 'green']]
#+end_src

** Answer
Descending order: ~z,y,...,a~; ~9,8,...,1~
#+begin_src ruby :results value
arr.map do |subarr|
  subarr.sort {|a, b| b <=> a }
end
#+end_src

#+RESULTS:
#+begin_example
[["c", "b", "a"], [3, 2, 1], ["green", "blue", "black"]]
#+end_example

* Problem 10
Given the following data structure and without modifying the original array, use the ~map~ method to return a new array identical in structure to the original but where the value of each integer is incremented by 1.
#+begin_src ruby :results none
[{a: 1}, {b: 2, c: 3}, {d: 4, e: 5, f: 6}]
#+end_src

** Answer
Observation: every integer is the value of a key in a hash. There are no integer keys, only integer key-values.
#+begin_src ruby :results value
arr = [{a: 1}, {b: 2, c: 3}, {d: 4, e: 5, f: 6}]
arr.map do |el|
  copy = {}
  el.each_pair {|k,v| copy[k] = v + 1}
  copy
end
#+end_src

#+RESULTS:
#+begin_example
[{:a=>2}, {:b=>3, :c=>4}, {:d=>5, :e=>6, :f=>7}]
#+end_example

#+begin_src ruby :results value
arr
#+end_src

#+RESULTS:
#+begin_example
[{:a=>1}, {:b=>2, :c=>3}, {:d=>4, :e=>5, :f=>6}]
#+end_example

* Problem 11
Given the following data structure use a combination of methods, including either the ~select~ or ~reject~ method, to return a new array identical in structure to the original but containing only the integers that are multiples of ~3~.
#+begin_src ruby :results none
arr = [[2], [3, 5, 7], [9], [11, 13, 15]]
#+end_src

** Solution
#+begin_src ruby :results value
arr.map do |subarr|
  subarr.map do |el|
    el if el % 3 == 0
  end
  .select {|e| e != nil }
end
#+end_src

#+RESULTS:
#+begin_example
[[], [3], [9], [15]]
#+end_example

Simpler solution would be
#+begin_src ruby :results value
arr.map do |el|
  el.select do |n|
    n % 3 == 0
  end
end
#+end_src

#+RESULTS:
#+begin_example
[[], [3], [9], [15]]
#+end_example

* Problem 12
Given the following data structure, and /without/ using the ~Array#to_h~ method, write some code that will return a hash where the key is the first item in each sub array and the value is the second item.
#+begin_src ruby :results none
arr = [[:a, 1], ['b', 'two'], ['sea', {c: 3}], [{a: 1, b: 2, c: 3, d: 4}, 'D']]
# expected return value: {:a=>1, "b"=>"two", "sea"=>{:c=>3}, {:a=>1, :b=>2, :c=>3, :d=>4}=>"D"}
#+end_src

** Solution
Observation: ~arr~ is an array of arrays. Each subarray in ~arr~ is composed of only two members, regardless of member type. We will not worry about any level deeper than this.
#+begin_src ruby :results value
def my_array_to_hash(arr)
  hash = {}
  arr.each do |el|
    hash[el[0]] = el[1]
  end
  hash
end
my_array_to_hash(arr)
#+end_src

#+RESULTS:
#+begin_example
{:a=>1, "b"=>"two", "sea"=>{:c=>3}, {:a=>1, :b=>2, :c=>3, :d=>4}=>"D"}
#+end_example

* Problem 13
Given the following data structure, return a new array containing the same sub-arrays as the original but ordered logically by only taking into consideration the /odd/ numbers they contain.
#+begin_src ruby :results none
arr = [[1, 6, 9], [1, 4, 9], [1, 6, 7], [1, 8, 3]]
#+end_src
The sorted array should look like this:
#+begin_src ruby :results none
[[1, 8, 3], [1, 6, 7], [1, 4, 9], [1, 6, 9]]
#+end_src

** Solution
What happens when two elements have the same odd numbers, but different even numbers? Does the order between the two matter? For example, does it matter if ~[1, 4, 9]~ comes before ~[1, 6, 9]~ or not?
#+begin_src ruby :results value
arr.sort_by do |el|
  el.select {|n| n.odd?}
end
#+end_src

#+RESULTS:
#+begin_example
[[1, 8, 3], [1, 6, 7], [1, 6, 9], [1, 4, 9]]
#+end_example

It appears that the result I got was the same as the official solution, even though both differ from the "should look like this" presented in the problem description.

* Problem 14
Given this data structure write some code to return an array containing the colors of the fruits and the sizes of the vegetables. The sizes should be uppercase and the colors should be capitalized.
#+begin_src ruby :results none
hsh = {
  'grape' => {type: 'fruit', colors: ['red', 'green'], size: 'small'},
  'carrot' => {type: 'vegetable', colors: ['orange'], size: 'medium'},
  'apple' => {type: 'fruit', colors: ['red', 'green'], size: 'medium'},
  'apricot' => {type: 'fruit', colors: ['orange'], size: 'medium'},
  'marrow' => {type: 'vegetable', colors: ['green'], size: 'large'},
}
#+end_src
The return value should look like this:
#+begin_src ruby :results none
[["Red", "Green"], "MEDIUM", ["Red", "Green"], ["Orange"], "LARGE"]
#+end_src

** Solution
#+begin_src ruby
arr = []
hsh.each_value do |traits|
  if traits[:type] == 'fruit'
    arr << traits[:colors].map {|p| p.capitalize }
  else
    arr << traits[:size].upcase
  end
end
p arr
#+end_src

#+RESULTS:
#+begin_example
[["Red", "Green"], "MEDIUM", ["Red", "Green"], ["Orange"], "LARGE"]
#+end_example

We can also call ~Hash#map~ to convert our hash into an array!
#+begin_src ruby :results value
hsh.map do |_, traits|
  if traits[:type] == 'fruit'
    traits[:colors].map {|c| c.capitalize}
  elsif traits[:type] == 'vegetable'
    traits[:size].upcase
  end
end
#+end_src

#+RESULTS:
#+begin_example
[["Red", "Green"], "MEDIUM", ["Red", "Green"], ["Orange"], "LARGE"]
#+end_example

* Problem 15
Given this data structure write some code to return an array which contains only the hashes where all the integers are even.
#+begin_src ruby :results none
arr = [{a: [1, 2, 3]}, {b: [2, 4, 6], c: [3, 6], d: [4]}, {e: [8], f: [6, 10]}]
#+end_src

** Solution
#+begin_src ruby :results value pp
arr.select do |hsh|
  not hsh.values.any? {|arr| arr.any? {|e| e.odd?}}
end
#+end_src

#+RESULTS:
#+begin_example
[{:e=>[8], :f=>[6, 10]}]
#+end_example

* Problem 16
A UUID is a type of identifier often used as a way to uniquely identify items...which may not all be created by the same system. That is, without any form of synchronization, two or more separate computer systems can create new items and label them with a UUID with no significant chance of stepping on each other's toes.

It accomplishes this feat through massive randomization. The number of possible UUID values is approximately 3.4 X 10E38.

Each UUID consists of 32 hexadecimal characters, and is typically broken into 5 sections like this 8-4-4-4-12 and represented as a string.

It looks like this: ~"f65c57f6-a6aa-17a8-faa1-a67f2dc9fa91"~

Write a method that returns one UUID when called with no parameters.

** Solution
#+begin_src ruby
def uuid
  uuid = ""
  uuid << Random.rand(16**8 - 1).to_s(16)
  uuid << "-"
  uuid << Random.rand(16**4 - 1).to_s(16)
  uuid << "-"
  uuid << Random.rand(16**4 - 1).to_s(16)
  uuid << "-"
  uuid << Random.rand(16**4 - 1).to_s(16)
  uuid << "-"
  uuid << Random.rand(16**12 - 1).to_s(16)
  uuid
end
uuid()

def uuid2
  uuid = ""
  32.times do
    uuid << Random.rand(16).to_s(16)
  end
  uuid[0..7] + '-' + uuid[8..11] + '-' + uuid[12..15] + '-' + uuid[16..19] + '-' + uuid[20..]
end
puts uuid()
puts uuid2()
#+end_src

#+RESULTS:
#+begin_example
6ca22a0-11d8-d6a5-4e20-9c48b0b7a017
d0fa171e-ad7c-c9e7-f18c-bf867bcbbccd
#+end_example
